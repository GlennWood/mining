#!/bin/bash

    if [[ $EUID -ne 0 ]]
    then
		echo "$0 must be run as root."
		sudo -H $0 $*
		exit $?
	fi
	source /etc/environment
	source /etc/profile

# Make and configure some initial directories
MINERS_FOLDERS='/opt/mining /var/mining /var/log/mining /var/run/miners /var/local/persist /opt/Downloads /etc/mining /etc/ansible'
mkdir -p $MINERS_FOLDERS 2>/dev/null
chown -R ${MINERS_USER} $MINERS_FOLDERS
# Make ~/.ssh folders in root and $MINERS_USER accounts
mkdir -p ~/.ssh/config.d >/dev/null /home/${MINERS_USER}/.ssh/config.d >/dev/null
chmod 0700 ~/.ssh/config.d /home/${MINERS_USER}/.ssh/config.d
chown -R $MINERS_USER:$MINERS_USER /home/${MINERS_USER}/.ssh

pushd /opt/mining/install/
### TODO: Get miners python scripts from github:GlennWood/miners
### MANUALLY copy GlennWood/mining/install/install-* into /opt/mining/install/
chmod 0754 /opt/mining/install/install-*
grep 'path = /opt/mining' /etc/samba/smb.conf >/dev/null 2>&1 || /opt/mining/install/install-samba $RIG_TAG

chmod 0754 /opt/mining/*.py /opt/mining/*/*.py
ln -sf /opt/mining/miners.py  /usr/local/bin/miners
ln -sf /opt/mining/monitor.py /usr/local/bin/monitor-miners
ln -sf /opt/mining/install/InstallMiners.py /usr/local/bin/InstallMiners

RAMDISK_SIZE=10M
mkdir -p /var/local/ramdisk
mount -t tmpfs -o size=${RAMDISK_SIZE} tmpfs /var/local/ramdisk
chown ${MINERS_USER} /var/local/ramdisk         
echo "none /var/local/ramdisk tmpfs nodev,nosuid,noexec,nodiratime,size=${RAMDISK_SIZE} 0 0" >> /etc/fstab

# Figure out if we have AMD graphic cards, Nvidia graphic cards, or both
HAS_AMD=$(lspci | grep VGA | grep AMD    >/dev/null && echo AMD)
HAS_NVI=$(lspci | grep VGA | grep NVIDIA >/dev/null && echo NVI)
[ -n "$HAS_AMD" ] && PLATFORM=$HAS_AMD
[ -n "$HAS_NVI" ] && PLATFORM=$HAS_NVI
[ -n "$HAS_AMD" ] && [ -n "$HAS_NVI" ] && PLATFORM=BTH

### Great post at https://zxq9.com/archives/795
cat >> /etc/environment << ETC_ENVIRONMENT
PLATFORM=$PLATFORM
LOG_DIR=/var/log/mining
PYTHONPATH=/opt/mining/mining:/opt/mining/install
XAUTHORITY=/home/$MINERS_USER/.Xauthority
ETC_ENVIRONMENT
source /etc/environment

# Create some handy command-line aliases
cat >> /etc/profile.d/alias.sh << PROFILE_ALIAS
alias status-all='miners status --scope all'
alias whattomine='miners whattomine'
alias whattomine-all='miners whattomine --scope all'
alias sync-mining-rigs='ansible-playbook /opt/mining/ansible/playbooks/sync-mining-rigs.yml'
alias systemback='/usr/lib/systemback/sbsustart systemback'
PROFILE_ALIAS
source /etc/profile.d/alias.sh

# Setup bash-completion (aka tab-completion)
cat >> /etc/bash.bashrc << ENABLE_SMART_COMPLETION
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi
ENABLE_SMART_COMPLETION
ln -sf $MINING_ROOT/etc/bash_completion_miners.sh /etc/bash_completion.d/miners
ln -sf $MINING_ROOT/etc/bash_completion_install_miners.sh /etc/bash_completion.d/install_miners

apt-get -y update ; apt-get -y dist-upgrade
apt-get -y autoremove ; apt-get -y autoclean
add-apt-repository -y ppa:nemh/systemback
apt-get -y update
apt-get -y install openssh-server git autoconf autoconf-archive curl selinux-utils libffi-dev \
                   libssl-dev libcurl4-openssl-dev \
                   mesa-utils systemback python-pip python3-pip python3-dev python3-xlrd expect lrzip

### FIXME: need to logout and back in for 'pip install--upgrade pip' to work, now. Why is that?
pip install --upgrade pip
### FIXTHEM: You know, I still don't think python development team understands the concept of backward compatibility ... you'd think python2 to python3 would have taught them something ...
###     REF: https://github.com/pypa/pip/issues/5240#issuecomment-381673100
sed -i.bak 's/from pip import main/from pip._internal import main/' /usr/bin/pip
## TOTO: sed -i.bak 's/from pip import main/from pip._internal import main/' /usr/local/bin/pip3

### Ref: http://python-future.org/compatible_idioms.html
pip install future builtins past six
pip install xlrd docopt requests jprops
# go ahead, laugh, but this did fix a problem on one of my rigs one day.
pip install psutil

apt-get install python3-setuptools
easy_install3 pipapt-get -y install python3-pip
pip2 install xlrd docopt requests jprops ansible bitshares pyyaml
## TODO: pip3 install --upgrade pip
pip3 install xlrd docopt requests jprops ansible bitshares pyyaml

# For PyCryptScraper
apt-get -y install python-lxml
pip2 install -U marshmallow --pre

### Ref: https://github.com/while-true-do/ansible-role-monit
# TODO: ansible-galaxy install while-true-do.monit

cat > /etc/update-motd.d/995-miners-status << MOTD_MINERS_STATUS
#!/bin/bash
/opt/mining/miners.py status --quick -v || echo "No miners are working here, now."
MOTD_MINERS_STATUS
chmod a+x /etc/update-motd.d/995-miners-status
[ -f /etc/update-motd.d/10-help-text ]         && chmod 0644 /etc/update-motd.d/10-help-text
[ -f /etc/update-motd.d/50-landscape-sysinfo ] && chmod 0644 /etc/update-motd.d/50-landscape-sysinfo

echo "INSTALL_2ND_DATE=`date --utc +%Y-%m-%dT%H-%M-%SZ`" >> /etc/environment
echo
echo "Basic folders, ramdisk, OS packages and facilities for GlennWood/mining have been prepared."
echo "A reboot is highly recommended at this point."

echo "Hit ctrl-C to abort the reboot."
sleep 10
reboot
